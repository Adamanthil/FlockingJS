// Andrew Bender & Thomas Nagl
// CS679 - Spring 2010
// Originally based on flocking demo by Casey Reas and Ben Fry
Flock flock;
int leftBorder = 135;
int rightBorder = 870;
int topBorder = 100;
int bottomBorder = 530;

void setup() {
	size(1000,610);
	colorMode(RGB,255,255,255,100);
	frameRate(45);

	flock = new Flock();
	// Add an initial set of preys into the system
	for (int i = 0; i < 20; i++) {
	  flock.addPrey(new Prey(new Vector2D(width/2,height/2),2.5f,0.08f));
	}
	flock.addProtector(new Protector(new Vector2D(width/2,height/2),2.8,0.07f));
	smooth();
}

void draw() {

	background(100);
	// Draw Borders
	stroke(0);
	
	line(leftBorder,topBorder,rightBorder,topBorder);
	line(rightBorder,topBorder,rightBorder,bottomBorder);
	line(rightBorder,bottomBorder,leftBorder,bottomBorder);
	line(leftBorder,bottomBorder,leftBorder,topBorder);
	
	flock.run();
}

// Add a new prey into the System
void mousePressed() {
  flock.addPredator(new Predator(new Vector2D(mouseX,mouseY),3.6f,0.06f));
  //flock.removePrey((Prey)flock.preys.get(0));
}

class Flock {
	ArrayList preys; // An arraylist for all the preys
	ArrayList preds; // An arraylist for all the preds
	ArrayList protectors;
	PFont font;
	int roundNum;
	int score;
	int lives;
	int consecKills;
	int spreeTime;
	int placeTime;
	boolean displayPrize;
	boolean displayError;

  Flock() {
    preys = new ArrayList(); // Initialize the arraylist
    preds = new ArrayList();
	font = loadFont("Verdana"); 
	textFont(font); 
	protectors = new ArrayList();
	roundNum = 1;
	score = 0;
	lives = 5;
	consecKills = 0;
	displayPrize = false;
	displayError = false;
  }

  void run() {
	if(preys.size() == 0) {
		nextRound();
	}

    for(int i=0; i<protectors.size(); i++) {
      Protector b = (Protector) protectors.get(i);
      b.run(preys,preds,protectors);
    }
    for (int i = 0; i < preys.size(); i++) {
      Prey b = (Prey) preys.get(i);  
      b.run(preys,preds,protectors);  // Passing all lists of entities
    }
    for (int i = 0; i < preds.size(); i++) {
      Predator b = (Predator) preds.get(i);  
      b.run(preys,preds,protectors);  // Passing the entire list of entities
    }

	// Loop through the predators and check for collisions
    for (int i = 0; i < preds.size(); i++) {
      Predator b = (Predator) preds.get(i);  
		// Check for collisions with prey
      	for (int j = 0; j < preys.size(); j++) {
      		Prey p = (Prey) preys.get(j);  
      		if(p.loc.distance(p.loc,b.loc) < 10) {
				removePrey(p);
				score++;
				consecKills++;
				if(consecKills%5 == 0) {
					killingSpree();
				}
			}
    	}
		// Check for collisions with protectors
		for(int j = 0; j < protectors.size(); j++) {
			Protector p = (Protector) protectors.get(j);
			if(p.loc.distance(p.loc,b.loc) < 10) {
				removePredator(b);
				displayPrize = false;
				lives--;
				consecKills = 0;
			}
		}
    }

	stroke(0);
	
	int offset = 80;
	for(int i=0; i< preds.size(); i++) {
		Predator p = (Predator) preds.get(i);
		noFill();
		stroke(0);
		rect(5, offset, 100, 10);
		if( p.recharging == true) {
			fill(150,0,0);
		} else {
			fill(0,150,0);
		}
		rect(5, offset, p.currentStamina, 10);
		text("" + round(p.currentStamina), 115, offset+10); 
		offset += 15;
	}
	
	fill(150,150,0);
	text("ROUND " + roundNum, 5, 15);
	text("Score = " + score, 5, 30);
	text("Lives = " + lives, 5, 45);

	//If it is within 5 seconds of a killing spree occuring, inform the player that it occured
	if( (displayPrize) && (spreeTime + 5) > ((hour()*360) + (minute()*60) + second())) {
		fill(0,200,0);
		text("KILLING SPREE + " + floor(consecKills/5) + " LIVES", 5, 60);
	}

	//If it is within 5 seconds of an incorrect placement, inform the player that it occured
	if( (displayError) && (placeTime + 5) > ((hour()*360) + (minute()*60) + second())) {
		fill(200,0,0);
		text("NO MORE PREDATORS LEFT TO PLACE", 5, 75);
	}


	if(lives == 0) {
		gameOver();
	}
	if(preys.size() == 0) {
		fill(0,200,0);
		text("ROUND " + roundNum + " COMPLETED", leftBorder, topBorder);
	}
  }

	void addPrey(Prey b) {
		preys.add(b);
	}

	void addPredator(Predator p) {
		if(preds.size() < lives) {
			preds.add(p);
		} else {
			// Calculate time of attempted placement
			placeTime = (hour()*360) + (minute()*60) + second();
			displayError = true;
		}
	}

	void addProtector(Protector p) {
		protectors.add(p);
	}

	void removePrey(Prey b) {
		int index = preys.indexOf(b);
		if(index > -1) {
			preys.remove(index);	
		}
	 }
	void removePredator(Predator p) {
		int index = preds.indexOf(p);
		if(index > -1) {
			preds.remove(index);	
		}
	}
	void removeProtector(Protector p) {
		int index = protectors.indexOf(p);
		if(index > -1) {
			protectors.remove(index);
		}
	}

	void killingSpree() {
		// Calculate time of killing spree
		spreeTime = (hour()*360) + (minute()*60) + second();
		displayPrize = true;
		//Give reward
		lives+= round(consecKills/5);	
	}
	
	void gameOver() {
		// END THE GAME
		fill(200,0,0);
		text("GAME OVER", leftBorder, topBorder);
		exit();
	}

	void nextRound() {
		//END ROUND AND SET UP NEXT ONE

		int time = (hour()*360) + (minute()*60) + second() + 3;
		while(((hour()*360) + (minute()*60) + second()) < time) {
			//PAUSE
		}

		roundNum++;
		consecKills = 0;

		//remove existing predators
		while(preds.size() > 0) {
			removePredator( (Predator)preds.get(0) );
		}

		//remove existing protectors
		while(protectors.size() > 0) {
			removeProtector( (Protector)protectors.get(0) );
		}
		
		//add new prey
		for (int i = 0; i < 20; i++) {
			flock.addPrey(new Prey(new Vector2D(width/2,height/2),2.5f,0.08f));
		}

		//add new protectors
		for(int i=0; i<roundNum; i++) {
			flock.addProtector(new Protector(new Vector2D(width/2,height/2),2.8,0.07f));
		}
		
	}
}

//////////////////////////////////////////////////////////////////////////
// CLASS: Prey
/////////////////////////////////////////////////////////////////////////

class Prey {

	Vector2D loc;
	Vector2D vel;
	Vector2D acc;
	
	float r;
	float maxforce;    // Maximum steering force
	float maxspeed;    // Maximum speed

	Prey(Vector2D l, float ms, float mf) {
		acc = new Vector2D(0,0);
		vel = new Vector2D(random(-1,1),random(-1,1));
		loc = l.copy();
		r = 4.0f;
		maxspeed = ms;
		maxforce = mf;
	}
  
	void run(ArrayList preys, ArrayList preds, ArrayList protectors) {
		updateAcceleration(preys, preds, protectors);
		updateLocation();
		borders();
		render();
	}
  
	// Method to update location
	void updateLocation() {
		// Update velocity
		vel.add(acc);
		// Limit speed
		vel.limit(maxspeed);
		loc.add(vel);
		// Reset accelertion to 0 each cycle
		acc.setXY(0,0);
	}

	void seek(Vector2D target) {
		acc.add(steer(target,false));
	}
 
	void arrive(Vector2D target) {
		acc.add(steer(target,true));
	}

	// A method that calculates a steering vector towards a target
	// Takes a second argument, if true, it slows down as it approaches the target
	Vector2D steer(Vector2D target, boolean slowdown) {
		Vector2D steer;  // The steering vector
		Vector2D desired = target.sub(target,loc);  // A vector pointing from the location to the target
		float d = desired.magnitude(); // Distance from the target is the magnitude of the vector
		// If the distance is greater than 0, calc steering (otherwise return zero vector)
		if (d > 0) {
			// Normalize desired
			desired.normalize();
			// Two options for desired vector magnitude (1 -- based on distance, 2 -- maxspeed)
			if ((slowdown) && (d < 100.0f)) desired.mult(maxspeed*(d/100.0f)); // This damping is somewhat arbitrary
			else desired.mult(maxspeed);
			// Steering = Desired minus Velocity
			steer = target.sub(desired,vel);
			steer.limit(maxforce);  // Limit to maximum steering force
		} else {
			steer = new Vector2D(0,0);
		}
		return steer;
	}
  
	void render() {
		// Draw a triangle rotated in the direction of velocity
		float theta = vel.heading2D() + radians(90);
		fill(200);
		stroke(255);
		pushMatrix();
		translate(loc.x,loc.y);
		rotate(theta);
		beginShape(TRIANGLES);
		vertex(0, -r*2);
		vertex(-r, r*2);
		vertex(r, r*2);
		endShape();
		popMatrix();
	}
  
	// Wraparound
	void borders() {
		if (loc.x < leftBorder-r) loc.x = rightBorder+r;
		if (loc.y < topBorder-r) loc.y = bottomBorder+r;
		if (loc.x > rightBorder+r) loc.x = leftBorder-r;
		if (loc.y > bottomBorder+r) loc.y = topBorder-r;
	}
	
	// We accumulate a new acceleration each time based on a number of rules
	void updateAcceleration(ArrayList preys, ArrayList preds, ArrayList protectors) {
		// Component vectors of acceleration
		Vector2D separationComp = new Vector2D(0,0);
		Vector2D alignComp = new Vector2D(0,0);
		Vector2D cohesionComp = new Vector2D(0,0);
		Vector2D fleeComp = new Vector2D(0,0);
		
		float desiredSeparation = 30.0f;
		int separationCount = 0;
		float neighbordist = 40.0f;
		float fleeNeighborDist = 60.0f;
		int alignCount = 0;
		int fleeCount = 0;
		
		// -------------------------------------------------------------------
		// Loop for prey
		// -------------------------------------------------------------------
		for (int i = 0 ; i < preys.size(); i++) {
			Prey other = (Prey) preys.get(i);
			float d = loc.distance(loc,other.loc);	// Distance to other prey
			
			// Separation
			// If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
			if ((d > 0) && (d < desiredSeparation)) {
				// Calculate vector pointing away from neighbor
				Vector2D diff = loc.sub(loc,other.loc);
				diff.normalize();
				diff.div(d);        // Weight by distance
				separationComp.add(diff);
				separationCount++;            // Keep track of how many
			}
			
			// Alignment & Cohesion
			if ((d > 0) && (d < neighbordist)) {
		        alignComp.add(other.vel);
				cohesionComp.add(other.loc);
		        alignCount++;
		    }
		}
		
		// -------------------------------------------------------------------
		// Loop for protectors
		// -------------------------------------------------------------------
		for (int i = 0 ; i < protectors.size(); i++) {
			Protector other = (Protector) protectors.get(i);
			float d = loc.distance(loc,other.loc);	// Distance to protector
			
			// Separation
			// If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
			if ((d > 0) && (d < desiredSeparation)) {
				// Calculate vector pointing away from neighbor
				Vector2D diff = loc.sub(loc,other.loc);
				diff.normalize();
				diff.div(d);        // Weight by distance
				separationComp.add(diff);
				separationCount++;            // Keep track of how many
			}

			// Alignment & Cohesion
			if ((d > 0) && (d < neighbordist)) {
		        alignComp.add(other.vel);
				cohesionComp.add(other.loc);
		        alignCount++;
			}
		}
		
		// -------------------------------------------------------------------
		// Loop for predators
		// -------------------------------------------------------------------
		for (int i = 0 ; i < preds.size(); i++) {
			Predator other = (Predator) preds.get(i);
			float d = loc.distance(loc,other.loc);
			if ((d > 0) && (d < fleeNeighborDist)) {
				fleeComp.add(other.loc); // Add location
				fleeCount++;
			}
		}
		
		// -------------------------------------------------------------------
		// Final component vector calculations
		// -------------------------------------------------------------------

		// Separate
	    if (separationCount > 0) { // Average -- divide by how many
	      separationComp.div((float)separationCount);
	    }
		
		// Align
		if (alignCount > 0) {
	      alignComp.div((float)alignCount);
	      alignComp.limit(maxforce);
	    }
		
		// Cohesion
		if (alignCount > 0) {
	      cohesionComp.div((float)alignCount);
	      cohesionComp = steer(cohesionComp,false);  // Steer towards the location
	    }
		
		// Flee
		if (fleeCount > 0) {
			fleeComp.div((float)fleeCount);
			fleeComp = steer(fleeComp,false);  // Steer towards the location
			fleeComp.mult(-1.0f);
	    }
		
		// Arbitrarily weight these forces
		separationComp.mult(4.0f);
		alignComp.mult(1.0f);
		cohesionComp.mult(1.8f);
		fleeComp.mult(7.0f);

		// Add the force vectors to acceleration
		acc.add(separationComp);
		acc.add(alignComp);
		acc.add(cohesionComp);
		acc.add(fleeComp);
	}

} // End class Prey

//////////////////////////////////////////////////////////////////////////
// CLASS: Protector
/////////////////////////////////////////////////////////////////////////

class Protector {

  Vector2D loc;
  Vector2D vel;
  Vector2D acc;
  float r;
  float maxforce;    // Maximum steering force
  float maxspeed;    // Maximum speed
  float truemax;

  Protector(Vector2D l, float ms, float mf) {
    acc = new Vector2D(0,0);
    vel = new Vector2D(random(-1,1),random(-1,1));
    loc = l.copy();
    r = 7.0f;
    maxspeed = ms;
    maxforce = mf;
    truemax = 2 * ms;
  }
  
  void run(ArrayList preys, ArrayList preds, ArrayList protectors) {
    flock(preys, preds, protectors);
    update();
    borders();
    render();
  }

  // We accumulate a new acceleration each time based on a number of rules
  void flock(ArrayList preys, ArrayList preds, ArrayList protectors) {
    Vector2D sep = separate(preys,protectors);   // Separation
    Vector2D ali = align(preys);      // Alignment
    Vector2D coh = cohesion(preys);   // Cohesion
	Vector2D chs = chase(preds);	  // Chase
	
    // Arbitrarily weight these forces
    sep.mult(3.5f);
    ali.mult(1.0f);
    coh.mult(2.5f);
    chs.mult(8.0f);
	
    // Add the force vectors to acceleration
    acc.add(sep);
    acc.add(ali);
    acc.add(coh);
	acc.add(chs);
  }
  
  // Method to update location
  void update() {
    // Update velocity
    vel.add(acc);
    // Limit speed
    vel.limit(maxspeed);
    loc.add(vel);
    // Reset accelertion to 0 each cycle
    acc.setXY(0,0);
  }

  void seek(Vector2D target) {
    acc.add(steer(target,false));
  }
 
  void arrive(Vector2D target) {
    acc.add(steer(target,true));
  }

  // A method that calculates a steering vector towards a target
  // Takes a second argument, if true, it slows down as it approaches the target
  Vector2D steer(Vector2D target, boolean slowdown) {
    Vector2D steer;  // The steering vector
    Vector2D desired = target.sub(target,loc);  // A vector pointing from the location to the target
    float d = desired.magnitude(); // Distance from the target is the magnitude of the vector
    // If the distance is greater than 0, calc steering (otherwise return zero vector)
    if (d > 0) {
      // Normalize desired
      desired.normalize();
      // Two options for desired vector magnitude (1 -- based on distance, 2 -- maxspeed)
      if ((slowdown) && (d < 100.0f)) desired.mult(maxspeed*(d/100.0f)); // This damping is somewhat arbitrary
      else desired.mult(maxspeed);
      // Steering = Desired minus Velocity
      steer = target.sub(desired,vel);
      steer.limit(maxforce);  // Limit to maximum steering force
    } else {
      steer = new Vector2D(0,0);
    }
    return steer;
  }
  
  void render() {
    // Draw a triangle rotated in the direction of velocity
    float theta = vel.heading2D() + radians(90);
    fill(0,0,200);
    stroke(0,0,200);
    pushMatrix();
    translate(loc.x,loc.y);
    rotate(theta);
    beginShape(TRIANGLES);
    vertex(0, -r*2);
    vertex(-r, r*2);
    vertex(r, r*2);
    endShape();
    popMatrix();
  }
  
  // Wraparound
  void borders() {
	if (loc.x < leftBorder-r) loc.x = rightBorder+r;
	if (loc.y < topBorder-r) loc.y = bottomBorder+r;
	if (loc.x > rightBorder+r) loc.x = leftBorder-r;
	if (loc.y > bottomBorder+r) loc.y = topBorder-r;
  }

  // Separation
  // Method checks for nearby preys and steers away
  Vector2D separate (ArrayList preys, ArrayList protectors) {
    float desiredseparation = 60.0f;
    Vector2D sum = new Vector2D(0,0);
    int count = 0;
    // For every prey in the system, check if it's too close
    for (int i = 0 ; i < preys.size(); i++) {
      Prey other = (Prey) preys.get(i);
      float d = loc.distance(loc,other.loc);
      // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
      if ((d > 0) && (d < desiredseparation)) {
        // Calculate vector pointing away from neighbor
        Vector2D diff = loc.sub(loc,other.loc);
        diff.normalize();
        diff.div(d);        // Weight by distance
        sum.add(diff);
        count++;            // Keep track of how many
      }
    }
    // For every protector in the system, check if it's too close
    for (int i = 0 ; i < protectors.size(); i++) {
      Protector other = (Protector) protectors.get(i);
      float d = loc.distance(loc,other.loc);
      // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
      if ((d > 0) && (d < desiredseparation)) {
        // Calculate vector pointing away from neighbor
        Vector2D diff = loc.sub(loc,other.loc);
        diff.normalize();
        diff.div(d);        // Weight by distance
        sum.add(diff);
        count++;            // Keep track of how many
      }
    }

    // Average -- divide by how many
    if (count > 0) {
      sum.div((float)count);
    }
    return sum;
  }
  
  // Alignment
  // For every nearby prey in the system, calculate the average velocity
  Vector2D align (ArrayList preys) {
    float neighbordist = 50.0f;
    Vector2D sum = new Vector2D(0,0);
    int count = 0;
    for (int i = 0 ; i < preys.size(); i++) {
      Prey other = (Prey) preys.get(i);
      float d = loc.distance(loc,other.loc);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.vel);
        count++;
      }
    }
    if (count > 0) {
      sum.div((float)count);
      sum.limit(maxforce);
    }
    return sum;
  }

  // Cohesion
  // For the average location (i.e. center) of all nearby preds, calculate steering vector towards that location
  Vector2D cohesion (ArrayList preys) {
    float neighbordist = 50.0f;
    Vector2D sum = new Vector2D(0,0);   // Start with empty vector to accumulate all locations
    int count = 0;
    for (int i = 0 ; i < preys.size(); i++) {
      Prey other = (Prey) preys.get(i);
      float d = loc.distance(loc,other.loc);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.loc); // Add location
        count++;
      }
    }
    if (count > 0) {
      sum.div((float)count);
      return steer(sum,false);  // Steer towards the location
    }
    return sum;
  }

	// Chase
	Vector2D chase (ArrayList preds) {
	    float neighbordist = 100.0f;
	    Vector2D sum = new Vector2D(0,0);   // Start with empty vector to accumulate all locations
	    int count = 0;
	    for (int i = 0 ; i < preds.size(); i++) {
	      Predator other = (Predator) preds.get(i);
	      float d = loc.distance(loc,other.loc);
	      if ((d > 0) && (d < neighbordist)) {
	        sum.add(other.loc); // Add location
	        count++;
	      }
	    }
	    if (count > 0) {
	      sum.div((float)count);
	      return steer(sum,false);  // Steer towards the location
	    }
	    return sum;
	}

} // End class Protector

//////////////////////////////////////////////////////////////////////////
// CLASS: Predator
/////////////////////////////////////////////////////////////////////////

class Predator {

  Vector2D loc;
  Vector2D vel;
  Vector2D acc;
  float r;
  float maxforce;    // Maximum steering force
  float maxspeed;    // Maximum speed
  float truemax;
	float currentStamina;
	boolean recharging;

  Predator(Vector2D l, float ms, float mf) {
    acc = new Vector2D(0,0);
    vel = new Vector2D(random(-1,1),random(-1,1));
    loc = l.copy();
    r = 6.0f;
    maxspeed = ms;
    maxforce = mf;
    truemax = 2 * ms;
	currentStamina = 50.0f;
	recharging = false;
  }
  
  void run(ArrayList preys, ArrayList preds, ArrayList protectors) {
    flock(preys, preds, protectors);
    update();
    borders();
    render();
  }

  // We accumulate a new acceleration each time based on a number of rules
  void flock(ArrayList preys, ArrayList preds, ArrayList protectors) {
    Vector2D sep = separate(preds);   // Separation
	Vector2D mou = mouseFollow();      // Mouse Follow

    // Add the force vectors to acceleration
    if(mou.magnitude() != 0){
		//Stamina adjustments
		mou.mult(5.0f);
		sep.mult(5.0f);
		acc.add(sep);
		acc.add(mou);
    }
    else {
	
	    Vector2D ali = align(preds);      // Alignment
	    Vector2D coh = cohesion(preds);   // Cohesion
		Vector2D chs = chase(preys);	  // Chase
		Vector2D fle = flee(protectors);	// Flee protectors

	    // Arbitrarily weight these forces
	    sep.mult(3.0f);
	    ali.mult(1.0f);
	    coh.mult(1.5f);
	    chs.mult(5.0f);
		fle.mult(3.0f);
	
		maxspeed = truemax/2;
		acc.add(sep);
		acc.add(ali);
		acc.add(coh);
		acc.add(chs);
		acc.add(fle);
    }

  }
  
	// Method to update location
	void update() {
		// Update velocity
		vel.add(acc);
		
		// Cap speed
		if(recharging) {
			vel.limit(truemax/8.0f);
		}
		else {
			vel.limit(truemax);	
		}
		
		// Update the stamina
		staminaUpdate();
		loc.add(vel);
		// Reset accelertion to 0 each cycle
		acc.setXY(0,0);
	}

	// Update the stamina values
	void staminaUpdate() {
		
		// Set if stamina is recharging
		if(recharging && currentStamina >= 50) {
			recharging = false;
		} else if(currentStamina <= 0) {
			currentStamina = 0;
			recharging = true;
		} else if(currentStamina > 100) {
			currentStamina = 100;
	    }
		
		// Stamina drain/recharge based on velocity
		if(vel.magnitude() >= truemax / 2.0f) {
			currentStamina -= 0.2f;
		}
		else {
			currentStamina += 0.2f;
		}
	}

  // A method that calculates a steering vector towards a target
  // Takes a second argument, if true, it slows down as it approaches the target
  Vector2D steer(Vector2D target, boolean userControl) {
    Vector2D steer;  // The steering vector
    Vector2D desired = target.sub(target,loc);  // A vector pointing from the location to the target
    float d = desired.magnitude(); // Distance from the target is the magnitude of the vector
    // If the distance is greater than 0, calc steering (otherwise return zero vector)
    if (d > 0) {
		// Normalize desired
		desired.normalize();
                
		if(userControl) {
			desired.mult(maxspeed * (d / 100.0f));
		}
		else {
			desired.mult(maxspeed); 
		}
		
		// Steering = Desired minus Velocity
		steer = target.sub(desired,vel);
		steer.limit(maxforce);  // Limit to maximum steering force
    } else {
      steer = new Vector2D(0,0);
    }
    return steer;
  }
  
  void render() {
    // Draw a triangle rotated in the direction of velocity
    float theta = vel.heading2D() + radians(90);
    fill(200,0,0);
    stroke(200,0,0);
    pushMatrix();
    translate(loc.x,loc.y);
    rotate(theta);
    beginShape(TRIANGLES);
    vertex(0, -r*2);
    vertex(-r, r*2);
    vertex(r, r*2);
    endShape();
    popMatrix();
  }
  
  // Wraparound
  void borders() {
	if (loc.x < leftBorder-r) loc.x = rightBorder+r;
	if (loc.y < topBorder-r) loc.y = bottomBorder+r;
	if (loc.x > rightBorder+r) loc.x = leftBorder-r;
	if (loc.y > bottomBorder+r) loc.y = topBorder-r;
  }

  // Separation
  // Method checks for nearby preds and steers away
  Vector2D separate (ArrayList preds) {
    float desiredseparation = 30.0f;
    Vector2D sum = new Vector2D(0,0);
    int count = 0;
    // For every prey in the system, check if it's too close
    for (int i = 0 ; i < preds.size(); i++) {
      Predator other = (Predator) preds.get(i);
      float d = loc.distance(loc,other.loc);
      // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
      if ((d > 0) && (d < desiredseparation)) {
        // Calculate vector pointing away from neighbor
        Vector2D diff = loc.sub(loc,other.loc);
        diff.normalize();
        diff.div(d);        // Weight by distance
        sum.add(diff);
        count++;            // Keep track of how many
      }
    }
    // Average -- divide by how many
    if (count > 0) {
      sum.div((float)count);
    }
    return sum;
  }
  
  // Alignment
  // For every nearby prey in the system, calculate the average velocity
  Vector2D align (ArrayList preds) {
    float neighbordist = 50.0f;
    Vector2D sum = new Vector2D(0,0);
    int count = 0;
    for (int i = 0 ; i < preds.size(); i++) {
      Predator other = (Predator) preds.get(i);
      float d = loc.distance(loc,other.loc);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.vel);
        count++;
      }
    }
    if (count > 0) {
      sum.div((float)count);
      sum.limit(maxforce);
    }
    return sum;
  }

  // Cohesion
  // For the average location (i.e. center) of all nearby preds, calculate steering vector towards that location
  Vector2D cohesion (ArrayList preds) {
    float neighbordist = 50.0f;
    Vector2D sum = new Vector2D(0,0);   // Start with empty vector to accumulate all locations
    int count = 0;
    for (int i = 0 ; i < preds.size(); i++) {
      Predator other = (Predator) preds.get(i);
      float d = loc.distance(loc,other.loc);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.loc); // Add location
        count++;
      }
    }
    if (count > 0) {
      sum.div((float)count);
      return steer(sum,false);  // Steer towards the location
    }
    return sum;
  }
  

    // Mouse Follow
  // Calculate the steering vector towards the mouse
  Vector2D mouseFollow () {
	// If mouse is in the top left corner, use AI
    if((mouseX < 100) && (mouseY<80)) {
      return new Vector2D(0,0);
    }
    Vector2D mousePos = new Vector2D(mouseX, mouseY);

	// Move mouse ahead if to close (to avoid animation jitters)
	/*
	Vector2D diff = mousePos.sub(mousePos,loc);
    if(diff.magnitude < 80.0f) {
		diff = diff.mult(diff,-1);
		mousePos = mousePos.add(mousePos,diff);
	}
	*/
	
    return steer(mousePos,true);  // Steer towards the location
  }

  // Flee from protectors
  Vector2D flee (ArrayList protectors) {
    float neighbordist = 80.0f;
    Vector2D sum = new Vector2D(0,0);   // Start with empty vector to accumulate all locations
    int count = 0;
    for (int i = 0 ; i < protectors.size(); i++) {
      Protector other = (Protector) protectors.get(i);
      float d = loc.distance(loc,other.loc);
      if ((d > 0) && (d < neighbordist)) {
        sum.add(other.loc); // Add location
        count++;
      }
    }
    if (count > 0) {
      sum.div((float)count);
      sum = steer(sum,false);  // Steer towards the location
		sum.mult(-1.0f);
		return sum;
    }
    return sum;
  }

	// Chase
	Vector2D chase (ArrayList preys) {
	    float neighbordist = 100.0f;
	    Vector2D sum = new Vector2D(0,0);   // Start with empty vector to accumulate all locations
	    int count = 0;
	    for (int i = 0 ; i < preys.size(); i++) {
	      Prey other = (Prey) preys.get(i);
	      float d = loc.distance(loc,other.loc);
	      if ((d > 0) && (d < neighbordist)) {
	        sum.add(other.loc); // Add location
	        count++;
	      }
	    }
	    if (count > 0) {
	      sum.div((float)count);
	      return steer(sum,false);  // Steer towards the location
	    }
	    return sum;
	}

} // End class Predator

// Simple Vector2D Class 
static class Vector2D {
  float x;
  float y;

  Vector2D(float x_, float y_) {
    x = x_; y = y_;;
  }
  
  Vector2D() {
    x = 0f; y = 0f;
  }

  void setX(float x_) {
    x = x_;
  }

  void setY(float y_) {
    y = y_;
  }
  
  void setXY(float x_, float y_) {
    x = x_;
    y = y_;
  }

  void setXY(Vector2D v) {
    x = v.x;
    y = v.y;
  }
  
  float magnitude() {
    return (float) Math.sqrt(x*x + y*y);
  }

  Vector2D copy() {
    return new Vector2D(x,y);
  }

  Vector2D copy(Vector2D v) {
    return new Vector2D(v.x, v.y);
  }
  
  void add(Vector2D v) {
    x += v.x;
    y += v.y;
  }

  void sub(Vector2D v) {
    x -= v.x;
    y -= v.y;
  }

  void mult(float n) {
    x *= n;
    y *= n;
  }

  void div(float n) {
    x /= n;
    y /= n;
  }

  void normalize() {
    float m = magnitude();
    if (m > 0) {
       div(m);
    }
  }

  void limit(float max) {
    if (magnitude() > max) {
      normalize();
      mult(max);
    }
  }

  float heading2D() {
    float angle = (float) Math.atan2(-y, x);
    return -1*angle;
  }

  Vector2D add(Vector2D v1, Vector2D v2) {
    Vector2D v = new Vector2D(v1.x + v2.x,v1.y + v2.y);
    return v;
  }

  Vector2D sub(Vector2D v1, Vector2D v2) {
    Vector2D v = new Vector2D(v1.x - v2.x,v1.y - v2.y);
    return v;
  }

  Vector2D div(Vector2D v1, float n) {
    Vector2D v = new Vector2D(v1.x/n,v1.y/n);
    return v;
  }

  Vector2D mult(Vector2D v1, float n) {
    Vector2D v = new Vector2D(v1.x*n,v1.y*n);
    return v;
  }

  float distance (Vector2D v1, Vector2D v2) {
    float dx = v1.x - v2.x;
    float dy = v1.y - v2.y;
    return (float) Math.sqrt(dx*dx + dy*dy);
  }

}